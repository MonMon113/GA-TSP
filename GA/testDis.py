import random
import numpy as np

map = {}

class Data:
	# lay du lieu tu trong file
	def __init__(self, filename):
		lines = open(filename).read().split('\n')
		i = 0
		n = 1
		for line in lines:
			i = i + 1
			if i >= 7 and line != 'EOF' and line != '':
				type1 = [float(_) for _ in line.split()]
				del type1[0]
				map[n] = type1
				n = n + 1
class GA:
	def DistanceCalculate(self, individual1, individual2):
		# tim ten thanh pho trong bang map va lay toa do cua thanh pho
		for i in map:
			if individual1 == i:
				point1 = map[i]
			if individual2 == i:
				point2 = map[i]
		distance = np.power(((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2), 0.5)
		return distance

	def Distance(self, individual):
		# tinh tong duong di cua ca the
		distance = 0
		for n in range(1, len(individual)+1):
			# print (n)
			if n >= 1 and n < len(individual):
				p1 = individual[n-1]
				p2 = individual[n]
				distance = distance + self.DistanceCalculate(p1, p2)
			if n == len(individual):
				p1 = individual[n-1]
				p2 = individual[0]
				distance = distance + self.DistanceCalculate(p1, p2)
		return distance

	def Check(self, child, population):
		# kiem tra co phan tu bi trung nhau hay khong
		check = 0
		for i in population:
			if population[i] == child:
				check = check + 1
		return check

if __name__ == '__main__':
	population = {1: 28613.748131618533, 2: 28616.186559671514, 3: 28689.382338801704, 4: 28612.124045497334, 5: 28673.991992724732, 6: 28623.059691333317, 7: 28671.487665670746, 8: 28648.971340969052, 9: 28630.31504490732, 10: 28666.365776189617, 11: 28666.345423468996, 12: 28578.721203773403, 13: 28612.124045497334, 14: 28744.799507930504, 15: 28618.226485867843, 16: 28721.046709298975, 17: 28809.699306057995, 18: 28610.451692281145, 19: 28737.870771266753, 20: 28611.17715303421, 21: 28643.3833809799, 22: 28601.155101238764, 23: 28637.053234417766, 24: 28681.573052010706, 25: 28758.361181743505, 26: 28679.8974719687, 27: 28633.262049770685, 28: 28616.545447315737, 29: 28613.5201561784, 30: 28666.808658664722, 31: 28755.25812939496, 32: 28607.498400292687, 33: 28623.059691333317, 34: 28631.14256683909, 35: 28731.7768421815, 36: 28721.046709298975, 37: 28618.226485867843, 38: 28563.93148280269, 39: 28563.33085769643, 40: 28616.545447315737, 41: 28596.11563899396, 42: 28605.665256112752, 43: 28600.477268473147, 44: 28738.97001679209, 45: 28723.745452700157, 46: 28714.382406960936, 47: 28682.199004741695, 48: 28580.735374880864, 49: 28758.361181743505, 50: 28512.12818016339, 51: 28630.642197676498, 52: 28643.3833809799, 53: 28601.483969308647, 54: 28563.33085769643, 55: 28630.642197676498, 56: 28579.339264199796, 57: 28734.628706372212, 58: 28718.04696636642, 59: 28583.760666018206, 60: 28562.30739668149, 61: 28648.971340969052, 62: 28679.8974719687, 63: 28601.04088608935, 64: 28769.624298230676, 65: 28618.226485867843, 66: 28617.568908330675, 67: 28595.061346204173, 68: 28529.522615383954, 69: 28581.32591802325, 70: 28742.683307663043, 71: 28643.3833809799, 72: 28614.110699320787, 73: 28741.282799494682, 74: 28617.871703693705, 75: 28577.666910983615, 76: 28729.965927579782, 77: 28594.72961027677, 78: 28631.14256683909, 79: 28621.514891715073, 80: 28695.287818045672, 81: 28578.721203773403, 82: 28624.892835513252, 83: 28563.340939660306, 84: 28593.204164461797, 85: 28613.24776245594, 86: 28604.268453120236, 87: 28718.04696636642, 88: 28610.598599682362, 89: 28596.125720957836, 90: 28656.597557504167, 91: 28738.834420583895, 92: 28723.745452700157, 93: 28544.912961460926, 94: 28563.33085769643, 95: 28596.71626410022, 96: 28561.94482897923, 97: 28545.936422475865, 98: 28718.04696636642, 99: 28618.435321309917, 100: 28723.745452700157}

	child =[80, 114, 221, 277, 144, 199, 264, 158, 128, 84, 260, 106, 63, 54, 276, 253, 135, 170, 51, 5, 99, 16, 131, 19, 164, 73, 152, 70, 244, 169, 41, 149, 207, 13, 155, 28, 234, 39, 202, 35, 188, 193, 229, 185, 23, 204, 3, 174, 173, 225, 122, 95, 101, 121, 226, 242, 47, 241, 112, 30, 159, 270, 271, 239, 208, 186, 59, 17, 231, 66, 58, 27, 279, 167, 156, 72, 214, 132, 127, 129, 246, 165, 145, 220, 245, 212, 22, 227, 262, 254, 32, 157, 7, 45, 67, 136, 223, 85, 83, 90, 116, 96, 117, 113, 14, 2, 243, 278, 228, 181, 110, 182, 15, 153, 130, 154, 166, 217, 198, 20, 65, 142, 209, 108, 138, 195, 178, 219, 201, 256, 148, 250, 104, 105, 64, 43, 168, 107, 42, 57, 74, 94, 230, 257, 12, 213, 97, 33, 232, 274, 25, 18, 69, 125, 75, 46, 161, 267, 6, 38, 100, 263, 187, 237, 200, 24, 81, 71, 233, 9, 197, 53, 189, 176, 194, 248, 88, 68, 163, 92, 50, 160, 115, 172, 179, 48, 86, 55, 62, 275, 259, 119, 206, 139, 77, 249, 143, 261, 109, 82, 255, 11, 120, 61, 52, 137, 4, 203, 235, 37, 118, 98, 247, 272, 56, 222, 76, 211, 1, 93, 8, 49, 44, 150, 151, 236, 184, 196, 240, 26, 36, 215, 146, 34, 238, 133, 40, 252, 171, 224, 218, 60, 91, 79, 268, 175, 29, 21, 280, 102, 191, 140, 10, 78, 177, 87, 141, 183, 180, 89, 162, 216, 269, 124, 273, 266, 190, 123, 126, 111, 192, 134, 205, 258, 31, 210, 251, 147, 265, 103]
	a = Data('a280.tsp')
	test = GA()
	# print (map)
	print (test.Distance(child))
	# print (test.Check(30135.294454790313, population))
